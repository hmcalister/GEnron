// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/ticker/v1/tickerinfo.proto

package tickerv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/hmcalister/genron/gen/api/ticker/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TickerInfoServiceName is the fully-qualified name of the TickerInfoService service.
	TickerInfoServiceName = "api.ticker.v1.TickerInfoService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TickerInfoServiceGetAllTickerNamesProcedure is the fully-qualified name of the
	// TickerInfoService's GetAllTickerNames RPC.
	TickerInfoServiceGetAllTickerNamesProcedure = "/api.ticker.v1.TickerInfoService/GetAllTickerNames"
	// TickerInfoServiceGetTickerValueProcedure is the fully-qualified name of the TickerInfoService's
	// GetTickerValue RPC.
	TickerInfoServiceGetTickerValueProcedure = "/api.ticker.v1.TickerInfoService/GetTickerValue"
)

// TickerInfoServiceClient is a client for the api.ticker.v1.TickerInfoService service.
type TickerInfoServiceClient interface {
	GetAllTickerNames(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetAllTickerNamesResponse], error)
	GetTickerValue(context.Context, *connect.Request[v1.GetTickerValueRequest]) (*connect.Response[v1.GetTickerValueResponse], error)
}

// NewTickerInfoServiceClient constructs a client for the api.ticker.v1.TickerInfoService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTickerInfoServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TickerInfoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	tickerInfoServiceMethods := v1.File_api_ticker_v1_tickerinfo_proto.Services().ByName("TickerInfoService").Methods()
	return &tickerInfoServiceClient{
		getAllTickerNames: connect.NewClient[emptypb.Empty, v1.GetAllTickerNamesResponse](
			httpClient,
			baseURL+TickerInfoServiceGetAllTickerNamesProcedure,
			connect.WithSchema(tickerInfoServiceMethods.ByName("GetAllTickerNames")),
			connect.WithClientOptions(opts...),
		),
		getTickerValue: connect.NewClient[v1.GetTickerValueRequest, v1.GetTickerValueResponse](
			httpClient,
			baseURL+TickerInfoServiceGetTickerValueProcedure,
			connect.WithSchema(tickerInfoServiceMethods.ByName("GetTickerValue")),
			connect.WithClientOptions(opts...),
		),
	}
}

// tickerInfoServiceClient implements TickerInfoServiceClient.
type tickerInfoServiceClient struct {
	getAllTickerNames *connect.Client[emptypb.Empty, v1.GetAllTickerNamesResponse]
	getTickerValue    *connect.Client[v1.GetTickerValueRequest, v1.GetTickerValueResponse]
}

// GetAllTickerNames calls api.ticker.v1.TickerInfoService.GetAllTickerNames.
func (c *tickerInfoServiceClient) GetAllTickerNames(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetAllTickerNamesResponse], error) {
	return c.getAllTickerNames.CallUnary(ctx, req)
}

// GetTickerValue calls api.ticker.v1.TickerInfoService.GetTickerValue.
func (c *tickerInfoServiceClient) GetTickerValue(ctx context.Context, req *connect.Request[v1.GetTickerValueRequest]) (*connect.Response[v1.GetTickerValueResponse], error) {
	return c.getTickerValue.CallUnary(ctx, req)
}

// TickerInfoServiceHandler is an implementation of the api.ticker.v1.TickerInfoService service.
type TickerInfoServiceHandler interface {
	GetAllTickerNames(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetAllTickerNamesResponse], error)
	GetTickerValue(context.Context, *connect.Request[v1.GetTickerValueRequest]) (*connect.Response[v1.GetTickerValueResponse], error)
}

// NewTickerInfoServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTickerInfoServiceHandler(svc TickerInfoServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tickerInfoServiceMethods := v1.File_api_ticker_v1_tickerinfo_proto.Services().ByName("TickerInfoService").Methods()
	tickerInfoServiceGetAllTickerNamesHandler := connect.NewUnaryHandler(
		TickerInfoServiceGetAllTickerNamesProcedure,
		svc.GetAllTickerNames,
		connect.WithSchema(tickerInfoServiceMethods.ByName("GetAllTickerNames")),
		connect.WithHandlerOptions(opts...),
	)
	tickerInfoServiceGetTickerValueHandler := connect.NewUnaryHandler(
		TickerInfoServiceGetTickerValueProcedure,
		svc.GetTickerValue,
		connect.WithSchema(tickerInfoServiceMethods.ByName("GetTickerValue")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.ticker.v1.TickerInfoService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TickerInfoServiceGetAllTickerNamesProcedure:
			tickerInfoServiceGetAllTickerNamesHandler.ServeHTTP(w, r)
		case TickerInfoServiceGetTickerValueProcedure:
			tickerInfoServiceGetTickerValueHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTickerInfoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTickerInfoServiceHandler struct{}

func (UnimplementedTickerInfoServiceHandler) GetAllTickerNames(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetAllTickerNamesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.ticker.v1.TickerInfoService.GetAllTickerNames is not implemented"))
}

func (UnimplementedTickerInfoServiceHandler) GetTickerValue(context.Context, *connect.Request[v1.GetTickerValueRequest]) (*connect.Response[v1.GetTickerValueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.ticker.v1.TickerInfoService.GetTickerValue is not implemented"))
}
