// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/ticker/v1/tickervalue.proto

package tickerv1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"
	v1 "github.com/hmcalister/genron/gen/api/ticker/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TickerValueServiceName is the fully-qualified name of the TickerValueService service.
	TickerValueServiceName = "api.ticker.v1.TickerValueService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TickerValueServiceGetTickerValueProcedure is the fully-qualified name of the TickerValueService's
	// GetTickerValue RPC.
	TickerValueServiceGetTickerValueProcedure = "/api.ticker.v1.TickerValueService/GetTickerValue"
)

// TickerValueServiceClient is a client for the api.ticker.v1.TickerValueService service.
type TickerValueServiceClient interface {
	GetTickerValue(context.Context, *connect.Request[v1.GetTickerValueRequest]) (*connect.Response[v1.GetTickerValueResponse], error)
}

// NewTickerValueServiceClient constructs a client for the api.ticker.v1.TickerValueService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTickerValueServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TickerValueServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	tickerValueServiceMethods := v1.File_api_ticker_v1_tickervalue_proto.Services().ByName("TickerValueService").Methods()
	return &tickerValueServiceClient{
		getTickerValue: connect.NewClient[v1.GetTickerValueRequest, v1.GetTickerValueResponse](
			httpClient,
			baseURL+TickerValueServiceGetTickerValueProcedure,
			connect.WithSchema(tickerValueServiceMethods.ByName("GetTickerValue")),
			connect.WithClientOptions(opts...),
		),
	}
}

// tickerValueServiceClient implements TickerValueServiceClient.
type tickerValueServiceClient struct {
	getTickerValue *connect.Client[v1.GetTickerValueRequest, v1.GetTickerValueResponse]
}

// GetTickerValue calls api.ticker.v1.TickerValueService.GetTickerValue.
func (c *tickerValueServiceClient) GetTickerValue(ctx context.Context, req *connect.Request[v1.GetTickerValueRequest]) (*connect.Response[v1.GetTickerValueResponse], error) {
	return c.getTickerValue.CallUnary(ctx, req)
}

// TickerValueServiceHandler is an implementation of the api.ticker.v1.TickerValueService service.
type TickerValueServiceHandler interface {
	GetTickerValue(context.Context, *connect.Request[v1.GetTickerValueRequest]) (*connect.Response[v1.GetTickerValueResponse], error)
}

// NewTickerValueServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTickerValueServiceHandler(svc TickerValueServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tickerValueServiceMethods := v1.File_api_ticker_v1_tickervalue_proto.Services().ByName("TickerValueService").Methods()
	tickerValueServiceGetTickerValueHandler := connect.NewUnaryHandler(
		TickerValueServiceGetTickerValueProcedure,
		svc.GetTickerValue,
		connect.WithSchema(tickerValueServiceMethods.ByName("GetTickerValue")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.ticker.v1.TickerValueService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TickerValueServiceGetTickerValueProcedure:
			tickerValueServiceGetTickerValueHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTickerValueServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTickerValueServiceHandler struct{}

func (UnimplementedTickerValueServiceHandler) GetTickerValue(context.Context, *connect.Request[v1.GetTickerValueRequest]) (*connect.Response[v1.GetTickerValueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.ticker.v1.TickerValueService.GetTickerValue is not implemented"))
}
